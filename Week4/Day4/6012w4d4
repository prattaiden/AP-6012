hash tables graphs

Hash tables (map)
  store an array of key value pairs
  compress(hash(k)) -> index in array
  k1,k2 map to sane index - collision

  chaining, each array slot holds many items

today
probing
  if we have a collision
    we find another index
      make sure when look for think also find it, put it somewhere we will find later on
        remove is also tricky

linear probing
  the slots we try to put the element in slot c(h(k)) + i % length

  walk through array, wrap around until we find a spot

get(k)
  index = c(h(k))
    if arr[index].k =/ k



contains method must search until it finds an unused slot - then sure that the key is not in there


REMOVE

  remove(90)
  put something there that tells search to keep going
  put a tombstone there not a null
  tombstone is a free slot for add and get must continue past it
  also "lazy delete" boolean set to true
  someway of marking it
  has to be something to store in array - java a pointer to a special object or a boolean

Probing big O analysis
  amount of searches depends on the lambda "load factor" which is N/arrayLength
  with chaining load factor can be greater than 1
  with probing if array is full have to rehash it

  want to know the expected number of slots to check
  assume elements are distributed randomly

  p (slot is full ) is lambda
  probabilty of k slots full in a row = lambda^k
  expected k = 1/1-lambda
  if my table has a load factor of lambda, number of steps expected to search on average
  the closer it gets to one, the more steps it will take

  lambda = .5 "half full" = 1/.5 = 2
  not realistic

  primary clustering
    get big chunks of used array

  more accuruate formula
    1+1/(1-lambda)^2
      grows fast above lambda = .5

  avoid primary clustering by choosing a different probing sequence
    instead of looking at element in order until we find spot

  next simplest strategy is quadratic probing
    look at c(h(k)) + i^2


  table length 16
  c(h(k)) -> 0
    what indices do we look at with quadratic probing
    0,1,4,9 16%16 = 0;goes on repeated same indices

    will never touch a whole bunch of indices
    possible will not find a slot

    array length should be a prime number
    java BigInteger method that is nextProbablePrime(x)

    with a lambda less than .5 anda prime table size quadratic probing is really good

    double hashing
    probing sequence
    c(h(k)) + h2(k) + i

--------------------------------------------------------------------------------------------------
Graphs:
representing data where relationships are a key
set of nodes or vertices
  connected by edges
  trees are a subset of graphs


Terminology
  directed

  0------->1


  undirected

  0<------->1

  weight graph or unweighted graph

  neighbors of a node are the ones connected by an edge

  simple graphs
    no duplicate edges
    no self loops

  Paths
    connected sequence of edges (following arr if directed)
      put
  Cycle
    path which starts /ends at the same node


  undirected graphs
  "connected" if there is a path between every pair of nodes

  directed graph "strongly connected"

  same but follow edges along the arrows

  special graphs
  Trees
    no loops (acyclic)
    find one node is the root, draw as heiarchical structure
    trees are undirected or root to leaf directed

  Directed Acyclic Graphs DAGs
  cannot make a loop, nodes with multiple parents

class Graph
  class Node
    data
    set<Node> neighbors;
    or collections<Node> nodes;
    HashMap <String,Node>

  sparse Graphs
    "not too many edges"
      each node has O(1) neighbors

    #of neighbors is "degree"
      digraph in degree, out degree

    Dense graph
      average node egree is O(V)
        most nodes are connected to most other nodes

    Adjacency matrix
      2D array of edges

      diagonal is empty if simple graph

    algorithms:
      path finding
        given a graph and a start + end node
          find a path from start to end

      findPath(s,e){
        frontier = simpleDataStructure(s) - some collection - put starting node in it
        n = frontier.removeSomeNode[]
        if n == end;
          reconstruct the path and return it

        add N's neighbors to the frontiers
          update extra info

      }

  initialize frontier with starting node, as long as stuff to explore, get node to look at , check if got to end, otherwise what neighbors of N need to be added to frontier
  //after loop
    no path


  stack, queue, priority queue
  ____(s,e)
  //algorithm from above filling in book keeping info
  when we want to reconstruct
  s.cameFrom = s;
  Q frontier = Q(s);
  while(frontier is not empty){
     n = frontier.dequeue();
     if(n == end)
      follow the came from links until I get to start
      return path
    for (neighbors of n)
      if neighbor.cameFrom is null
        neighbor.cameFrom = n
        frontier.enqueue(neighbor)
    //while is done
    return no path
  }
