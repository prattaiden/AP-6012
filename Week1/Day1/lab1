Lab 1 Questions:

Answer the following questions in a text file(NOT A WORD DOCUMENT!). Add your answer below each question.

1. Where is the assertEquals method defined? What does it do? Can we use assertEquals for more than just int types? (Hint: Consult the API for JUnit)
assertEquals is a part of the JUnit being used to run tests in the program. 

2. Briefly describe what each of the three tests is checking.
The first test is testing an empty array and asserting that the expected value is -1. This is because the findSmallestDiff method checks if the array list length is less than 2 and returns -1.
The second test is testing if all of the elements within the array are equal. So the difference is 0.
The third test is testing a random array of elements that has positive and negative numbers.

3. Why is our unimplemented findSmallestDiff method passing one of the tests?
It was passing because the original stub was set to return 0. The second test was expecting a 0.

4. Why are we failing the third test? How should our method be modified to correct this?
I added Math.abs() around the int tmp_diff = Math.abs(a[i] - a[j]);
This changed the values of the elements being compared to ensure there were no errors with the subrataction


5. What is the appropriate call to assertEquals for your new test (test 4)?
@Test
    public void ascendingArrayElements(){
        assertEquals(1, DiffUtil.findSmallestDiff(arr4));
    }


6. Provide one more test (test 5) for the findSmallestDiff method. Briefly describe your test and write the call to assertEquals here.
Test 5 in my code is an array of all negative elements.  arr5 = new int[] {-100, -50, -20, -10};
Because of the changes I made in the method, the absolute value of these negative numbers are compared without error. The assertEquals expects the answer to be 10, because that is the difference between -20 and -10.
 @Test
    public void negativeElementArray(){
        assertEquals(10, DiffUtil.findSmallestDiff(arr5));
    }



7. Briefly describe your unit tests for Lab 1.
I made tests for:
An ascending array of elements
A descending array of elements
An array with all negative elements
An array with repeating elements

