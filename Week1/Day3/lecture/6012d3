Complexity Analysis: Big O Notation

BROCODE GENERICS NOTES:
<Thing>

generic classes


BIG O Notation youtube notes:::
time it takes to run your function grows as the size of the input grows

time complexity : linear time, constant time, quadratic time

linear time O(n) - n is size of input, num of elements in given array
T=an+b
constant tinm O(1) -


Generics continued
object in inner class has reference to outer classes
static class Student{}
public void addAll(ArrayList<? extends T>other){ //want it to take an array list of any type as long as it is T or inherits from T
WILDCARD -- fill angle brackets with anything as long as it is at least a T , ? is a token
generic constraint with a wild card "type bounds"
for (var elem: other){
add(elem);
}
}

arraylist of a class that extends another has no way to interact

math.signum instead of casting, looks at the sign

public T getSmallest(Comparator< T > comp){ //in GrowableArray //...
if(size == 0){
  throw new IllegalArgumentException();
  or return null;
}
T smallest = arr[0];
for(int i = 0l i<size; i++);
//compare >>
int res = comp.compare(smallest, arr[i]); //in a loop
if(res > 0){
smallest = arr[i];
return smallest;
} }
//elsewhere
GrowableArray< TA > growableTAs = //...
growableTAs.getSmallest(new Comparator< Student >(){
@Override int compare(Student s1, Student s2){ return s1.getTuitionCost() - s2.getTuitionCost();
} });



BIG O
problem: finding a section in a textbook

open book somewhere -middle
 check page - if its what i want , done
if sec on page < one i want
rip out left part of textbook
^BINARY SEARCH

another algorithm when looking for a term in a book:
start at beginning , flip through each page one at a time
^LINEAR SEARCH

lineSearch(needle, haystack){ N = HAYSTACK LENGTH
for (i=0; haystacklength) (N TIMES)
if(h[i])==needle{ O(1) MULTIPLY O(N) worst case run time- proportional to the length of the list <= a*N
return i
}
}
run time will depend on the size of the haystack
count number of steps, fastest case, 3 steps

what is best case,  -- usually don't care
worst case , -- important
average case -- most useful -assuming needles usually are found in the haystack - could be pretty rare that we find it
assume it is about in the middle
average case is also O(N)
Big O Notation
f(x) = 3.5x2 + 2.1x -3.2
f(x) elementO(x2)
"f is O(x2)" = what we say

in big O loop runs n times


binarySearch(n,h){
L = 0
R = h.length
while (not done) --?? if L and R meet there is no more book , done
m = L + R/2
if h[m] == n
return m
else if h[m] < n
L = m+1
else h[m] >n
r = m-1
}
for binary everything is O(1) excpect while(not done) - ends when L and R meet
N elements left, cut in half and stop when get down to 1 or 0
O[1] work - as many loop iterations
O(#of loop iterations)
go backwards
i value = 2^i
0         1
1         2
2         4
3         8
4         16
5         32
k         N


2^k = N
solve for K
undo exponent , logbase2 = lg
k = lgN
2^lgN = N

loop that splits in half repeatedly -> O(ls N) times

sum = 0;
for (i = 0 .. n) - runs N times
  for(j = 0 .. n)- runs N times
    sum += arr[i] + arr[j]  - O[1] ] O(N) overall O[n^2]


for i = 0 .. n -- N times
  for j =0 .. i -- i times -> N/2 on average O(1)N/2 * N-> O(N^2)
      O(1) work O(1)
Oilers formula N(N-1)/2 N^2/2 O(N^2)

BIG O Analysis
looking at code
estimate number of steps
